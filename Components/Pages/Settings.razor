@page "/settings"
@rendermode InteractiveServer

@using TaskManager.Models
@using TaskManager.Service
@using TaskManager.Components.Elements

@inject BoardService BoardService
@inject BoardState BoardState
@inject TaskPriorityService TaskPriorityService

<PageTitle>Settings</PageTitle>

<h1>Settings</h1>
<br />
<h3>Manage Boards</h3>
<br />

<button class="btn btn-primary mb-2" data-bs-toggle="modal" data-bs-target="#addBoardModal">
    <i class="bi bi-plus"></i> Add Board
</button>

<!-- Table -->
<RadzenDataGrid Data="@BoardState.Boards" TItem="BoardM" RowHover="true" ShowPagingSummary="true" PageSize="5" AllowPaging="true" AllowSorting="true"  Style="min-height: 365px;">
    <Columns>
        <RadzenDataGridColumn TItem="BoardM" Property="Id" Title="Id" />
        <RadzenDataGridColumn TItem="BoardM" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="BoardM" Title="Actions" Width="100px">
            <Template Context="board">
                <button class="btn btn-danger" @onclick="() => confirmBoardDelete.Show(board.Id)">Delete</button>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>



<hr />
<h3 class="mt-5">Manage TaskPriority</h3>
<br />
<button class="btn btn-primary mb-2" data-bs-toggle="modal" data-bs-target="#addTaskPriorityModal">
    <i class="bi bi-plus"></i> Add TaskPriority
</button>

<!-- Table -->
<RadzenDataGrid Data="@TaskPriorities" TItem="TaskPriority"
                RowHover="true"
                ShowPagingSummary="true"
                PageSize="5"
                AllowPaging="true"
                AllowSorting="true"
                Style="min-height: 365px;"
                class="mb-5">
    <Columns>
        <RadzenDataGridColumn TItem="TaskPriority" Property="Id" Title="Id" />
        <RadzenDataGridColumn TItem="TaskPriority" Property="Name" Title="Name" />
        <RadzenDataGridColumn TItem="TaskPriority" Title="Actions" Width="100px">
            <Template Context="tp">
                <button class="btn btn-danger" @onclick="() => confirmPriorityDelete.Show(tp.Id)">Delete</button>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


<AddBoard/>
<AddTaskPriority OnTaskPriorityAdded="UpdateTaskPriority"/>
<ConfirmDialog TItem="int" @ref="confirmBoardDelete" 
               Title="Delete Board"
               Message="Are you sure you want to delete this board?"
               OnConfirm="DeleteBoardConfirmed" />

<ConfirmDialog TItem="int" @ref="confirmPriorityDelete" 
               Title="Delete Task Priority"
               Message="Are you sure you want to delete this priority?"
               OnConfirm="DeletePriorityConfirmed" />

@code {

    List<TaskPriority>? TaskPriorities { get; set; }

    private ConfirmDialog<int>? confirmBoardDelete;
    private ConfirmDialog<int>? confirmPriorityDelete;

    private async Task DeleteBoardConfirmed(int boardId)
    {
        await BoardService.DeleteBoardAsync(boardId);
        await BoardState.LoadBoardsAsync(BoardService);
    }

    private async Task DeletePriorityConfirmed(int priorityId)
    {
        await TaskPriorityService.DeleteTaskPriorityAsync(priorityId);
        await UpdateTaskPriority();
    }


    protected override async Task OnInitializedAsync()
    {
       BoardState.OnChange += OnBoardStateChanged;

       // Initial load
        if (!BoardState.Boards.Any())
        {
            await BoardState.LoadBoardsAsync(BoardService);
        }

        TaskPriorities = await TaskPriorityService.GetAllTaskPrioritiesAsync();
    }

    private async Task DeleteBoard(int boardId)
    {
        await BoardService.DeleteBoardAsync(boardId);

        await BoardState.LoadBoardsAsync(BoardService);

    }

    private async Task UpdateTaskPriority()
    {
        TaskPriorities = await TaskPriorityService.GetAllTaskPrioritiesAsync();
        StateHasChanged();
    }

    private async Task DeletePriority(int priorityId)
    {
        await TaskPriorityService.DeleteTaskPriorityAsync(priorityId);
        UpdateTaskPriority();
    }

    private void OnBoardStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        BoardState.OnChange -= OnBoardStateChanged;
    }
}
