@using TaskManager.Models
@using TaskManager.Service

@inject IJSRuntime JavaScript
@inject TaskState TaskState
@inject TaskService TaskService
@inject DragDropService DragDropService

<div draggable="true" class="card mt-2 mb-2 shadow-sm border-0 task-card"
     @onclick="UpdateTask"
     @ondragstart="() => DragDropService.DraggedTaskId = Task.Id">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h5 class="card-title mb-0 text-truncate title-multiline" title="@Task.Title">@Task.Title</h5>
            <button class="btn btn-sm btn-danger"
              @onclick:stopPropagation="true"
              @onclick="DeleteTask">
                X
            </button>
        </div>
        <div class="d-flex justify-content-between align-items-center mb-2">
            <span class="badge bg-secondary">@Task.Priority.Name</span>
        </div>
        <p class="card-text text-muted mb-2 description-clamp">@Task.Description</p>
        <div class="d-flex justify-content-end">
        </div>
    </div>
</div>

@code {
    [Parameter]
    public TaskM Task { get; set; }

    [CascadingParameter]
    public Func<int, Task> DeleteTaskCallback { get; set; }

    private async Task DeleteTask()
    {
        await DeleteTaskCallback.Invoke(Task.Id);
    }

    private async Task UpdateTask()
    {
        await TaskState.LoadTaskAsync(TaskService, Task.Id);
        await JavaScript.InvokeVoidAsync("showEditTaskModal");
    }    
}
