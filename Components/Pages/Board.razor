@page "/board/{boardId:int}"
@rendermode InteractiveServer

@attribute [Authorize]
@attribute [StreamRendering]

@using TaskManager.Components.Elements
@using TaskManager.Models
@using TaskManager.Service

@inject BoardService BoardService
@inject TaskListService TaskListService
@inject NavigationManager NavigationManager
@inject TaskState TaskState
@inject TaskService TaskService

@implements IDisposable

<PageTitle>Board</PageTitle>


<div class="container-xl mt-4">
    <h1 class="mb-4">Board @BoardModel?.Name</h1>

    @if (!(TaskLists == null || TaskLists.Count == 0))
    {
       <div class="d-flex align-items-center gap-3 mb-3">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTaskModal">
                <i class="bi bi-plus"></i> Add Task
            </button>

            <label class="form-label me-2 mb-0" for="sortSelect">Sort tasks by:</label>
            <div>
                <select id="sortSelect" class="form-select" style="width: auto;" @onchange="OnSelectChange">
                    <option value="date">Last update date</option>
                    <option value="priority">Priority</option>
                </select>
            </div>
        </div>
    }

    <div class="board mt-2 mb-2">
        <div class="d-flex overflow-auto gap-3 p-2" style="scroll-snap-type: x mandatory;">
            @if (TaskLists != null && TaskLists.Count > 0)
            {
                <CascadingValue Value="(Func<int, Task>)DeleteTask">
                    @foreach (var taskList in TaskLists)
                    {
                        <TaskList List="@taskList" OnTaskListDeleted="DeleteTaskList" OnTaskDragged="LoadBoardData" Ordered="Ordered" />
                    }
                </CascadingValue>
            }

            <div class="card flex-shrink-0 flex-grow-1 shadow-sm" 
                data-bs-toggle="modal" data-bs-target="#addTaskListModal" 
                style="cursor: pointer;">
                <div class="card-body overflow-auto d-flex justify-content-center align-items-center" style="flex-grow: 1;">
                    <p class="text-muted text-center mb-0">Click to add a new task list...</p>
                </div>
            </div>
        </div>
    </div>
</div>

@if (BoardModel != null)
{
    <AddTask @ref="addTaskRef" BoardId="@BoardId" OnTaskAdded="LoadBoardData"/>
    if (TaskState.Task != null)
    {
        <EditTask @ref="editTaskRef" TaskE="@TaskState.Task" OnTaskAddedOrEdited="LoadBoardData" />
    }
}
<AddTaskList BoardId="@BoardId" OnTaskListAdded="LoadBoardData" />

<ConfirmDialog TItem="int" @ref="confirmTaskListDelete" 
               Title="Delete Task List"
               Message="Are you sure you want to delete this task list?"
               OnConfirm="DeleteTaskListConfirmed" />

<ConfirmDialog TItem="int" @ref="confirmTaskDelete" 
               Title="Delete Task"
               Message="Are you sure you want to delete this task?"
               OnConfirm="DeleteTaskConfirmed" />

@code {
    [Parameter]
    public int BoardId { get; set; }

    protected BoardM? BoardModel { get; set; }

    protected List<TaskListM>? TaskLists { get; set; }

    private ConfirmDialog<int>? confirmTaskListDelete;

    private ConfirmDialog<int>? confirmTaskDelete;

    private AddTask? addTaskRef;
    private EditTask? editTaskRef;

    private bool Ordered { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        TaskState.OnChange += async () => await InvokeAsync(StateHasChanged);

        await TaskState.LoadTaskAsync(TaskService, 0); // initialize with null/empty task
        BoardModel = await BoardService.GetBoardByIdAsync(BoardId);
        if (BoardModel == null)
        {
            NavigationManager.NavigateTo("/Error/404");
        }

        await LoadBoardData();
    }

    private async Task DeleteTaskList(int taskListId)
    {
        if (confirmTaskListDelete != null)
        {
            confirmTaskListDelete.Show(taskListId);
        }
    }

    private async Task DeleteTask(int taskId)
    {
        if (confirmTaskDelete != null)
        {
            confirmTaskDelete.Show(taskId);
        }
    }

    private async Task DeleteTaskListConfirmed(int taskListId)
    {
        await TaskListService.DeleteTaskListAsync(taskListId);
        await LoadBoardData();
    }

    private async Task DeleteTaskConfirmed(int taskListId)
    {
        await TaskService.DeleteTaskAsync(taskListId);
        await LoadBoardData();
    }

    protected async Task LoadBoardData()
    {
        TaskLists = await TaskListService.GetAllTaskListsAsync(BoardId);

        if (addTaskRef != null)
        {
            await addTaskRef.RefreshTaskListsAsync();
        }

        if (editTaskRef != null)
        {
            await editTaskRef.RefreshTaskListsAsync();
        }

        StateHasChanged();
    }

    public async Task OnSelectChange(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (value == "date")
        {
            Ordered = true;
        }
        else if (value == "priority")
        {
            Ordered = false;
        }

        await LoadBoardData();
    }

    public void Dispose()
    {
        TaskState.OnChange -= StateHasChanged;
    }

}
