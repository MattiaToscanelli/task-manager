@rendermode InteractiveServer
@using TaskManager.Models
@using TaskManager.Service

@inject TaskListService TaskListService

<div class="card flex-shrink-0 flex-grow-1 shadow-sm">
    <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
        <h5 class="mb-0">@List.Name</h5>
        <button class="btn btn-sm btn-danger" @onclick="DeleteList" title="Delete list">
            <i class="bi bi-trash"></i> <!-- Bootstrap icon (optional) -->
        </button>
    </div>
    <div class="card-body overflow-auto" style="flex-grow: 1;">
        @if (List.Tasks.Count == 0)
        {
            <p class="text-muted">No tasks available.</p>
        }
        else
        {
            @foreach (var taskView in List.Tasks)
            {
                <TaskView TaskId="@taskView.Id" Title="@taskView.Title" Description="@taskView.Description" />
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public TaskListM List { get; set; }

    [Parameter]
    public EventCallback OnTaskListDeleted { get; set; }

    public async Task DeleteList()
    {
        await TaskListService.DeleteTaskListAsync(List.Id);
        if (OnTaskListDeleted.HasDelegate)
        {
            await OnTaskListDeleted.InvokeAsync();
        }
    }

}