@page "/board/{boardId:int}"
@rendermode InteractiveServer

@using TaskManager.Components.Elements
@using TaskManager.Models
@using TaskManager.Service

@inject BoardService BoardService
@inject TaskListService TaskListService
@inject NavigationManager NavigationManager
@inject TaskState TaskState
@inject TaskService TaskService

@implements IDisposable

<PageTitle>Board</PageTitle>


<div class="container-xl mt-4">
    <h1 class="mb-4">Board @BoardModel?.Name</h1>

    @if (!(TaskLists == null || TaskLists.Count == 0))
    {
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTaskModal">
            <i class="bi bi-plus"></i> Add Task
        </button>
    }

    <div class="board mt-2 mb-2">
        <div class="d-flex overflow-auto gap-3 p-2" style="scroll-snap-type: x mandatory;">
            @if (TaskLists != null && TaskLists.Count > 0)
            {
                @foreach (var taskList in TaskLists)
                {
                    <TaskList List="@taskList" OnTaskListDeleted="LoadBoardData" />
                }
            }

            <div class="card flex-shrink-0 flex-grow-1 shadow-sm" 
                data-bs-toggle="modal" data-bs-target="#addTaskListModal" 
                style="cursor: pointer;">
                <div class="card-body overflow-auto d-flex justify-content-center align-items-center" style="flex-grow: 1;">
                    <p class="text-muted text-center mb-0">Click to add a new task list...</p>
                </div>
            </div>
        </div>
    </div>
</div>

@if (BoardModel != null)
{
    <AddTask BoardId="@BoardId" OnTaskAdded="LoadBoardData"/>
    if (TaskState.Task != null)
    {
        <EditTask TaskE="@TaskState.Task" OnTaskAddedOrEdited="LoadBoardData" />
    }
}
<AddTaskList BoardId="@BoardId" OnTaskListAdded="LoadBoardData" />

@code {
    [Parameter]
    public int BoardId { get; set; }

    protected BoardM? BoardModel { get; set; }

    protected List<TaskListM>? TaskLists { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TaskState.OnChange += async () => await InvokeAsync(StateHasChanged);

        await TaskState.LoadTaskAsync(TaskService, 0); // initialize with null/empty task
        BoardModel = await BoardService.GetBoardByIdAsync(BoardId);
        if (BoardModel == null)
        {
            NavigationManager.NavigateTo("/Error/404");
        }

        await LoadBoardData();
    }

    protected async Task LoadBoardData()
    {
        TaskLists = await TaskListService.GetAllTaskListsAsync(BoardId);
        StateHasChanged();
    }

    public void Dispose()
    {
        TaskState.OnChange -= StateHasChanged;
    }

}
