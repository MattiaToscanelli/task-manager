@page "/settings"
@rendermode InteractiveServer

@using TaskManager.Models
@using TaskManager.Service
@using TaskManager.Components.Elements

@inject BoardService BoardService
@inject BoardState BoardState
@inject TaskPriorityService TaskPriorityService

<PageTitle>Settings</PageTitle>

<h1>Settings</h1>
<br />
<h3>Manage Boards</h3>
<br />

<button class="btn btn-primary mb-4" data-bs-toggle="modal" data-bs-target="#addBoardModal">
    <i class="bi bi-plus"></i> Add Board
</button>

<!-- Table -->
<table class="mb-5 table table-striped">
    <thead>
        <tr>
            <th width='5%'>Id</th>
            <th width='90%'>Name</th>
            <th width='5%'>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (BoardState.Boards != null && BoardState.Boards.Count > 0)
        {
            foreach (var board in BoardState.Boards)
            {
                <tr>
                    <td>@board.Id</td>
                    <td>@board.Name</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteBoard(board.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="3">No boards available.</td>
            </tr>
        }
    </tbody>
</table>

<hr />
<h3 class="mt-5">Manage TaskPriority</h3>
<br />
<button class="btn btn-primary mb-4" data-bs-toggle="modal" data-bs-target="#addTaskPriorityModal">
    <i class="bi bi-plus"></i> Add TaskPriority
</button>

<!-- Table -->
<table class="table table-striped">
    <thead>
        <tr>
            <th width='5%'>Id</th>
            <th width='90%'>Name</th>
            <th width='5%'>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (TaskPriorities != null && TaskPriorities.Count > 0)
        {
            foreach (var tp in TaskPriorities)
            {
                <tr>
                    <td>@tp.Id</td>
                    <td>@tp.Name</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeletePriority(tp.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="3">No boards available.</td>
            </tr>
        }
    </tbody>
</table>

<AddBoard/>
<AddTaskPriority OnTaskPriorityAdded="UpdateTaskPriority"/>

@code {

    List<TaskPriority>? TaskPriorities { get; set; }

    protected override async Task OnInitializedAsync()
    {
       BoardState.OnChange += OnBoardStateChanged;

       // Initial load
        if (!BoardState.Boards.Any())
        {
            await BoardState.LoadBoardsAsync(BoardService);
        }

        TaskPriorities = await TaskPriorityService.GetAllTaskPrioritiesAsync();
    }

    private async Task DeleteBoard(int boardId)
    {
        await BoardService.DeleteBoardAsync(boardId);

        await BoardState.LoadBoardsAsync(BoardService);

    }

    private async Task UpdateTaskPriority()
    {
        TaskPriorities = await TaskPriorityService.GetAllTaskPrioritiesAsync();
        StateHasChanged();
    }

    private async Task DeletePriority(int priorityId)
    {
        await TaskPriorityService.DeleteTaskPriorityAsync(priorityId);
        UpdateTaskPriority();
    }

    private void OnBoardStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        BoardState.OnChange -= OnBoardStateChanged;
    }
}
