@rendermode InteractiveServer
@using TaskManager.Models
@using TaskManager.Service

@inject IJSRuntime JavaScript
@inject TaskPriorityService TaskPriorityService

<div class="modal fade" id="addTaskPriorityModal" tabindex="-1" aria-labelledby="addBoardModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addBoardModalLabel">Add TaskPriority</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="taskPriority" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="name" class="col-form-label">Name:</label>
                        <InputText id="name" class="form-control" @bind-Value="taskPriority.Name" />
                    </div>

                    <div class="mb-3">
                        <label for="order" class="col-form-label">Order:</label>
                        <InputNumber id="order" class="form-control" @bind-Value="taskPriority.Order" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Add</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnTaskPriorityAdded { get; set; }

    private TaskPriority? taskPriority = new TaskPriority {Name = string.Empty, Order = 0};

    private async Task HandleValidSubmit()
    {
        await TaskPriorityService.CreateTaskPriorityAsync(taskPriority);

        taskPriority = new TaskPriority {Name = string.Empty, Order = 0};

        await JavaScript.InvokeVoidAsync("closeModal", "addTaskPriorityModal");

        if (OnTaskPriorityAdded.HasDelegate)
        {
            await OnTaskPriorityAdded.InvokeAsync(null);
        }
    }

}
