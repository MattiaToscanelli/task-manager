@page "/settings"
@rendermode InteractiveServer

@using TaskManager.Models
@using TaskManager.Service
@using TaskManager.Components.Elements

@inject BoardService BoardService
@inject BoardState BoardState
@inject TaskPriorityService TaskPriorityService

<PageTitle>Settings</PageTitle>

<h1>Settings</h1>
<br />
<h3>Manage Boards</h3>
<br />

<button class="btn btn-primary mb-2" data-bs-toggle="modal" data-bs-target="#addBoardModal">
    <i class="bi bi-plus"></i> Add Board
</button>

<!-- Table -->
<RadzenDataGrid Data="@BoardState.Boards" 
                TItem="BoardM" 
                RowHover="true" 
                ShowPagingSummary="true" 
                PageSize="5" 
                AllowPaging="true" 
                AllowSorting="true"
                AllowEditing="true"
                EditMode="DataGridEditMode.Single"
                RowUpdate="@OnUpdateBoard"
                RowEditCancel="@OnCancelBoardEdit"
                @ref="boardGrid"
                class="mb-5">

    <Columns>
        <RadzenDataGridColumn TItem="BoardM" Property="Id" Title="Id" />

        <RadzenDataGridColumn TItem="BoardM" Property="Name" Title="Name">
            <EditTemplate Context="board">
                <RadzenTextBox @bind-Value="board.Name" Style="width: 100%;" Name="BoardName" />
                <RadzenRequiredValidator Component="BoardName" Text="Name is required" Style="position: absolute;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="BoardM" Title="Actions" Width="90px">
            <Template Context="board">
                <div class="d-flex justify-content-center">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"
                                  Click="@(() => boardGrid.EditRow(board))" class="me-2" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
                                  Click="@(() => confirmBoardDelete.Show(board.Id))" />
                </div>
            </Template>

            <EditTemplate Context="board">
                <div class="d-flex justify-content-center">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small"
                                  Click="@(() => boardGrid.UpdateRow(board))" class="me-2" />
                    <RadzenButton Icon="cancel" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small"
                                  Click="@(() => boardGrid.CancelEditRow(board))" />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>



<hr />
<h3 class="pt-4">Manage TaskPriority</h3>
<br />
<button class="btn btn-primary mb-2" data-bs-toggle="modal" data-bs-target="#addTaskPriorityModal">
    <i class="bi bi-plus"></i> Add TaskPriority
</button>

<!-- Table -->
<RadzenDataGrid Data="@TaskPriorities" TItem="TaskPriority"
                RowHover="true"
                ShowPagingSummary="true"
                PageSize="5"
                AllowPaging="true"
                AllowSorting="true"
                AllowEditing="true"
                EditMode="DataGridEditMode.Single"
                @ref="taskPriorityGrid"
                RowUpdate="@OnUpdateTaskPriority"
                RowEditCancel="@OnCancelTaskPriorityEdit"
                class="mb-5">
    <Columns>
        <RadzenDataGridColumn TItem="TaskPriority" Property="Id" Title="Id" />
        <RadzenDataGridColumn TItem="TaskPriority" Property="Name" Title="Name">
            <EditTemplate Context="tp">
                <RadzenTextBox @bind-Value="tp.Name" Style="width: 100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>
        
        <RadzenDataGridColumn TItem="TaskPriority" Property="Order" Title="Order">
            <EditTemplate Context="tp">
                <RadzenNumeric @bind-Value="tp.Order" Min="1" Style="width: 100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="TaskPriority" Title="Actions" Width="90px">
            
            <Template Context="tp">
                <div class="d-flex justify-content-center">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Click="@(() => taskPriorityGrid.EditRow(tp))" class="me-2" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Click="@(() => confirmPriorityDelete.Show(tp.Id))" />
                </div>
            </Template>
            <EditTemplate Context="tp">
                <div class="d-flex justify-content-center">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Click="@(() => taskPriorityGrid.UpdateRow(tp))" class="me-2" />
                    <RadzenButton Icon="cancel" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" Click="@(() => taskPriorityGrid.CancelEditRow(tp))" />
                </div>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>



<AddBoard/>
<AddTaskPriority OnTaskPriorityAdded="UpdateTaskPriority"/>
<ConfirmDialog TItem="int" @ref="confirmBoardDelete" 
               Title="Delete Board"
               Message="Are you sure you want to delete this board?"
               OnConfirm="DeleteBoardConfirmed" />

<ConfirmDialog TItem="int" @ref="confirmPriorityDelete" 
               Title="Delete Task Priority"
               Message="Are you sure you want to delete this priority?"
               OnConfirm="DeletePriorityConfirmed" />

@code {

    List<TaskPriority>? TaskPriorities { get; set; }

    private ConfirmDialog<int>? confirmBoardDelete;
    private ConfirmDialog<int>? confirmPriorityDelete;

    private RadzenDataGrid<TaskPriority> taskPriorityGrid;

    private RadzenDataGrid<BoardM> boardGrid;

    private async Task OnUpdateBoard(BoardM board)
    {
        if (board == null)
        {
            return;
        }

        await BoardService.UpdateBoardAsync(board);
        await BoardState.LoadBoardsAsync(BoardService);
    }

    private void OnCancelBoardEdit(BoardM board)
    {
        // Optionally reload board data or rollback changes
    }

    private void OnUpdateTaskPriority(TaskPriority taskPriority)
    {
        if (taskPriority == null)
        {
            return;
        }

        // Update the task priority in the service
        TaskPriorityService.UpdateTaskPriorityAsync(taskPriority);
    }

    private void OnCancelTaskPriorityEdit(TaskPriority taskPriority)
    {
        // Optionally revert changes or reload data
    }


    private async Task DeleteBoardConfirmed(int boardId)
    {
        await BoardService.DeleteBoardAsync(boardId);
        await BoardState.LoadBoardsAsync(BoardService);
    }

    private async Task DeletePriorityConfirmed(int priorityId)
    {
        await TaskPriorityService.DeleteTaskPriorityAsync(priorityId);
        await UpdateTaskPriority();
    }


    protected override async Task OnInitializedAsync()
    {
       BoardState.OnChange += OnBoardStateChanged;

       // Initial load
        if (!BoardState.Boards.Any())
        {
            await BoardState.LoadBoardsAsync(BoardService);
        }

        TaskPriorities = await TaskPriorityService.GetAllTaskPrioritiesAsync();
    }

    private async Task DeleteBoard(int boardId)
    {
        await BoardService.DeleteBoardAsync(boardId);
        await BoardState.LoadBoardsAsync(BoardService);
    }

    private async Task UpdateTaskPriority()
    {
        TaskPriorities = await TaskPriorityService.GetAllTaskPrioritiesAsync();
        StateHasChanged();
    }

    private async Task DeletePriority(int priorityId)
    {
        await TaskPriorityService.DeleteTaskPriorityAsync(priorityId);
        await UpdateTaskPriority();
    }

    private void OnBoardStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        BoardState.OnChange -= OnBoardStateChanged;
    }
}
