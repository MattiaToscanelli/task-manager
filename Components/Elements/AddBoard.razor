@rendermode InteractiveServer
@using TaskManager.Models
@using TaskManager.Service

@inject IJSRuntime JavaScript
@inject BoardService BoardService
@inject BoardState BoardState

<div class="modal fade" id="addBoardModal" tabindex="-1" aria-labelledby="addBoardModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addBoardModalLabel">Add Board</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="board" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="name" class="col-form-label">Name:</label>
                        <InputText id="name" class="form-control" @bind-Value="board.Name" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Add</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private BoardM? board = new BoardM {Name = string.Empty};

    private async Task HandleValidSubmit()
    {
        await BoardService.CreateBoardAsync(board);

        board = new BoardM {Name = string.Empty};
        StateHasChanged();

        await BoardState.LoadBoardsAsync(BoardService);

        await JavaScript.InvokeVoidAsync("closeModal");
    }

}
