@rendermode InteractiveServer
@using TaskManager.Service

@inject BoardState BoardState
@inject BoardService BoardService

<nav class="navbar navbar-expand-lg navbar-dark bg-dark shadow-sm">
    <div class="container-fluid">
        <NavLink class="navbar-brand fw-bold text-light" href="/">TaskManager</NavLink>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                @foreach (var board in BoardState.Boards)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link"href="@($"/board/{board.Id}")" Match="NavLinkMatch.All">
                            @board.Name
                        </NavLink>
                    </li>
                }
                <li class="nav-item">
                    <NavLink class="nav-link" href="/settings">
                        Settings
                    </NavLink>
                </li>
            </ul>
        </div>
    </div>
</nav>

@code {
    protected override async Task OnInitializedAsync()
    {
        BoardState.OnChange += OnBoardStateChanged;

        // Initial load
        if (!BoardState.Boards.Any())
        {
            await BoardState.LoadBoardsAsync(BoardService);
        }
    }

    private void OnBoardStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        BoardState.OnChange -= OnBoardStateChanged;
    }
}