@rendermode InteractiveServer

@using TaskManager.Models
@using TaskManager.Service

@inject IJSRuntime JavaScript
@inject TaskService TaskService
@inject TaskListService TaskListService
@inject TaskPriorityService TaskPriorityService

<div class="modal fade" id="addTaskModal" tabindex="-1" aria-labelledby="addTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addTaskModalLabel">Add Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="task" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="name" class="col-form-label">Name:</label>
                        <InputText id="name" class="form-control" @bind-Value="task.Title" />
                    </div>
                    <div class="mb-3">
                        <label class="col-form-label">Priority:</label>
                        <select class="form-select" @bind="task.PriorityId" aria-label="Select priority">
                            <option value="-1" disabled selected>-- Select a priority --</option>
                            @foreach (var priority in taskPriorities)
                            {
                                <option value="@priority.Id">@priority.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="col-form-label">Column:</label>
                        <select class="form-select" @bind="task.TaskListId" aria-label="Select task list">
                            <option value="-1" disabled selected>-- Select a column --</option>
                            @foreach (var taskList in taskLists)
                            {
                                <option value="@taskList.Id">@taskList.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="col-form-label">Description:</label>
                        <InputTextArea id="description" class="form-control" @bind-Value="task.Description" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Add</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnTaskAdded { get; set; }

    [Parameter]
    public int BoardId { get; set; }

    private TaskM task { get; set; }

    private List<TaskPriority> taskPriorities { get; set; } = new List<TaskPriority>();

    private List<TaskListM> taskLists { get; set; } = new List<TaskListM>();

    protected override async Task OnInitializedAsync()
    {
        task = new TaskM
        {
            Title = string.Empty,
            Description = string.Empty,
            TaskListId = -1,
            PriorityId = -1,
        };
        await LoadBoardData();
    }

    private async Task LoadBoardData()
    {
        taskLists = await TaskListService.GetAllTaskListsAsync(BoardId);
        taskPriorities = await TaskPriorityService.GetAllTaskPrioritiesAsync();
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        await TaskService.CreateTaskAsync(task);

        Console.WriteLine($"Task Created: {task.Title}, Description: {task.Description}, TaskListId: {task.TaskListId}, PriorityId: {task.PriorityId}");

        task = new TaskM
        {
            Title = string.Empty,
            Description = string.Empty,
            TaskListId = -1,
            PriorityId = -1
        };

        StateHasChanged();

        if (OnTaskAdded.HasDelegate)
        {
           await OnTaskAdded.InvokeAsync();
        }

        await JavaScript.InvokeVoidAsync("closeModal", "addTaskModal");
        
    }
}